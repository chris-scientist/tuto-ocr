<?php

namespace ChrisScientistPlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator ;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
    //
    // Obtenir toutes les annonces triées selon la date (de création).
    //
    public function getAdverts($aPage, $aNbPerPage=10)
    {
        $aliasAdvert = 'a' ;
        $aliasImage = 'i' ;
        $aliasCategories = 'c' ;
        
        $query = $this->createQueryBuilder($aliasAdvert)
                // jointure pour l'image
                ->leftJoin($aliasAdvert . '.image', $aliasImage)
                ->addSelect($aliasImage)
                // jointure pour les catégories
                ->leftJoin($aliasAdvert . '.categories', $aliasCategories)
                ->addSelect($aliasCategories)
                ->orderBy($aliasAdvert . '.date', 'DESC')
                ->getQuery() ;
        
        $query->setFirstResult(($aPage - 1) * $aNbPerPage)
                ->setMaxResults($aNbPerPage) ;
        
        return new Paginator($query, true) ;
    }
    
    //
    // Obtenir une annonce à partir d'un identifiant.
    //
    public function findAnAdvert($aId)
    {
        $aliasAdvert = 'a' ;
        
        $qb = $this->createQueryBuilder()
                ->select($aliasAdvert)
                ->from($this->_entityName, $aliasAdvert)
                ->where($aliasAdvert . '.id = :id')
                ->setParameter('id', $aId) ;
        
        return $qb->getQuery()->getOneOrNullResult() ;
    }
    
    //
    // Obtenir les M annonces à partir de la N ieme,
    // avec M la limite d'annonces par pages (10 par défaut)
    // et N l'indice de la première annonce (0 par défaut).
    //
    public function findAdverts($aLimit=10, $anOffset=0)
    {
        $aliasAdvert = 'a' ;
        
        $qb = $this->createQueryBuilder()
                ->select($aliasAdvert)
                ->from($this->_entityName, $aliasAdvert)
                ->orderBy($aliasAdvert . '.date', 'ASC')
                ->setFirstResult($anOffset)
                ->setMaxResults($aLimit) ;
        
        return $qb->getQuery()->getResult() ;
    }
}
